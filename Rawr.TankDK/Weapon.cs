using System;
using System.Collections.Generic;
using System.Text;

namespace Rawr.TankDK {
    public class Weapon {
        public float baseSpeed;
        public float baseDamage;
        /// <summary>
        /// Speed of the weapon after haste has been applied.
        /// </summary>
        public float hastedSpeed;
        public float mitigation;
        public float effectiveExpertise;
        public float chanceDodged;
        /// <summary>
        /// Damage per second generated by the weapon after AP modifiers and haste.
        /// </summary>
        public float DPS;
        /// <summary>
        /// Damage per hit generated by the weapon after AP modifiers.
        /// </summary>
        public float damage;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="i">The item that represents the weapon in use</param>
        /// <param name="stats">Character stats</param>
        /// <param name="calcOpts">The calculation Options.</param>
        /// <param name="expertise">Expertise by racial weapon specialization</param>
        public Weapon (Item i, Stats stats, CalculationOptionsTankDK calcOpts, float expertise) {
            if (stats == null || calcOpts == null || calcOpts.talents == null) 
            { 
                // Missing necessary pieces.
                return; 
            }

            if (i == null) {
                i = new Item();
                i.Speed = 2f;
                i.MinDamage = 0;
                i.MaxDamage = 0;
            }

            // Ensure that the weapon that does damage has some sort of speed associated.
            if ((i.MinDamage > 0 || i.MaxDamage > 0) && i.Speed == 0)
            {
                i.Speed = 2f;
#if DEBUG
                throw new Exception("No Speed on Item.");
#endif
            }

            effectiveExpertise = stats.Expertise;
            float fightDuration = calcOpts.FightLength * 60f;

            if (i == null) { return; }

            baseSpeed = i.Speed;
            baseDamage = (float)(i.MinDamage + i.MaxDamage) / 2f + stats.WeaponDamage;


            #region Attack Speed
            {
                // TODO: make sure we're not double counting haste.
                hastedSpeed = baseSpeed / (1f + (StatConversion.GetHasteFromRating(stats.HasteRating, CharacterClass.DeathKnight)) + stats.PhysicalHaste);
                hastedSpeed /= 1f + 0.05f * (float)calcOpts.talents.ImprovedIcyTalons;

                if (calcOpts.Bloodlust) {
                    // TODO: Update this bloodlust value to be a special effect
                    //float bloodlustUptime = (calcOpts.Bloodlust * 40f);

                    //if (bloodlustUptime > fightDuration) bloodlustUptime = 1f;
                    //else bloodlustUptime /= fightDuration;

                    float numLust = fightDuration % 300f;  // bloodlust changed in 3.0, can only have one every 5 minutes.
                    float fullLustDur = (numLust - 1) * 300f + 40f;
                    if (fightDuration < fullLustDur) // if the last lust doesn't go its full duration
                    {
                        float lastLustFraction = (fullLustDur - fightDuration) / 40f;
                        numLust -= 1f;
                        numLust += lastLustFraction;
                    }

                    float bloodlustUptime = (numLust * 40f) / fightDuration;

                    hastedSpeed /= 1f + (0.3f * bloodlustUptime);
                }
            }
            #endregion

            #region Dodge
            {
                chanceDodged = StatConversion.WHITE_DODGE_CHANCE_CAP[calcOpts.TargetLevel-80];
                // Changing this to use the statconversion formula like Target Dodge%;
                chanceDodged -= StatConversion.GetDodgeParryReducFromExpertise(stats.Expertise);
                if (chanceDodged < 0f) chanceDodged = 0f;
            }
            #endregion

            #region White Damage
            {
                // To do, this operation needs to be moved out into it's own space. 
                // There's no reason it should sit in the constructor only.
                // White damage per hit.  Basic white hits are use elsewhere.
                damage = baseDamage + (stats.AttackPower / 14f) * baseSpeed;
                DPS = 0f;
                if (hastedSpeed > 0) 
                { 
                    DPS = damage / hastedSpeed; 
                }
            }
            #endregion
        }
    }
}
